{"ast":null,"code":"var _jsxFileName = \"D:\\\\DSI32\\\\ProjetChef\\\\platform_univercity\\\\NextGen-Project\\\\frontend\\\\src\\\\auth\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:4000/api/auth';\nexport const AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\n  useEffect(() => {\n    if (accessToken && !user) {\n      // fetch profile\n      axios.get(`${API_BASE}/me`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).then(res => setUser(res.data)).catch(err => {\n        // If token invalid, clear stored token\n        if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n          setAccessToken(null);\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n        }\n        setUser(null);\n      });\n    }\n  }, [accessToken]);\n  const login = async (email, password) => {\n    const res = await axios.post(`${API_BASE}/login`, {\n      email,\n      password\n    });\n    setAccessToken(res.data.accessToken);\n    localStorage.setItem('accessToken', res.data.accessToken);\n    // store refresh token in localStorage for demo; recommend httpOnly cookie in production\n    localStorage.setItem('refreshToken', res.data.refreshToken);\n    setUser(res.data.user);\n    // return user so callers can redirect based on role\n    return res.data.user;\n  };\n  const logout = () => {\n    setUser(null);\n    setAccessToken(null);\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  };\n  const refresh = async () => {\n    const token = localStorage.getItem('refreshToken');\n    if (!token) throw new Error('No refresh token');\n    const res = await axios.post(`${API_BASE}/refresh`, {\n      token\n    });\n    setAccessToken(res.data.accessToken);\n    localStorage.setItem('accessToken', res.data.accessToken);\n    return res.data.accessToken;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      accessToken,\n      login,\n      logout,\n      refresh\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"5/9qLSjRkKL1zxA06qL31WP7SaY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","AuthContext","AuthProvider","children","_s","user","setUser","accessToken","setAccessToken","localStorage","getItem","get","headers","Authorization","then","res","data","catch","err","response","status","removeItem","login","email","password","post","setItem","refreshToken","logout","refresh","token","Error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DSI32/ProjetChef/platform_univercity/NextGen-Project/frontend/src/auth/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:4000/api/auth';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\r\n\r\n  useEffect(() => {\r\n    if (accessToken && !user) {\r\n      // fetch profile\r\n      axios.get(`${API_BASE}/me`, { headers: { Authorization: `Bearer ${accessToken}` } })\r\n        .then(res => setUser(res.data))\r\n        .catch((err) => {\r\n          // If token invalid, clear stored token\r\n          if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n            setAccessToken(null);\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n          }\r\n          setUser(null);\r\n        });\r\n    }\r\n  }, [accessToken]);\r\n\r\n  const login = async (email, password) => {\r\n    const res = await axios.post(`${API_BASE}/login`, { email, password });\r\n    setAccessToken(res.data.accessToken);\r\n    localStorage.setItem('accessToken', res.data.accessToken);\r\n    // store refresh token in localStorage for demo; recommend httpOnly cookie in production\r\n    localStorage.setItem('refreshToken', res.data.refreshToken);\r\n    setUser(res.data.user);\r\n    // return user so callers can redirect based on role\r\n    return res.data.user;\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setAccessToken(null);\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n  };\r\n\r\n  const refresh = async () => {\r\n    const token = localStorage.getItem('refreshToken');\r\n    if (!token) throw new Error('No refresh token');\r\n    const res = await axios.post(`${API_BASE}/refresh`, { token });\r\n    setAccessToken(res.data.accessToken);\r\n    localStorage.setItem('accessToken', res.data.accessToken);\r\n    return res.data.accessToken;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, accessToken, login, logout, refresh }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}